def loadProperties() {
    def props = new Properties()
    def file = new File("gradle.properties")
    file.withInputStream {
        props.load(it)
    }
    return props
}


def writeProperties(props) {
    props.store(new File("gradle.properties").newWriter(), null)
}

def setVersion() {
    def newVersion = System.getProperty("newVersion")

    if (!newVersion) {
        newVersion = "${System.getenv("CURRENT_MAJOR_VERSION")}.${System.getenv("CURRENT_MINOR_VERSION")}.${System.getenv("BUILD_NUMBER")}"
        if (System.getProperty("zephyrRelease")) {
            newVersion += ".Final"
        } else {
            newVersion += "-SNAPSHOT"
        }
    }
    if (newVersion) {
        println("Setting version from $project.version to $newVersion")
        def props = loadProperties()
        props.version = newVersion.toString()
        writeProperties(props)
        println("successfully updated project version $project.version to $newVersion")

    } else {
        logger.warn("No new version passed in.  Not doing anything")
    }

}

project.tasks.register("setVersion") {
    doLast {
        setVersion()
    }
}


task copyPrismResources(type: Copy) {
    from "node_modules/prismjs"
    into "${buildDir}/generated/sources/main/resources/prismjs"

}
assemble.dependsOn copyPrismResources
assemble.mustRunAfter copyPrismResources

task populateVersions(type: Copy) {
    from "${project.projectDir}/src/main/resources/templates/Versions.java"
    into "${buildDir}/generated/sources/main/java/io/sunshower/aire/ux/components"

    def properties = new Properties()
    file("gradle.properties").withInputStream {
        properties.load(it)
    }
    def productionMode = findProperty('production') != null
    if (productionMode) {
        properties.replaceAll((k, v) -> {
            def sv = String.valueOf(v)
            return sv.contains("-SNAPSHOT") ? sv.replaceAll("-SNAPSHOT", "") : sv
        })
    }
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: properties)
}


task populatePaths(type: Copy) {
    from "$project.projectDir/src/main/resources/templates/Paths.java"
    into "$buildDir/generated/sources/main/java/io/sunshower/aire/ux/components"

    def productionMode = findProperty('production') != null
    def properties = new Properties()
    def modeString = productionMode ? "production" : "development";
    file("${project.projectDir}/src/main/resources/paths.$modeString").withInputStream {
        properties.load(it)
    }
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: properties)
}


task populate(dependsOn: ['populatePaths', 'populateVersions']) {
    group = "development"
}


import groovy.text.GStringTemplateEngine;

task generateLanguagesEnumeration() {

    def directory = new File("${project.rootDir}/node_modules/prismjs/components")
    if (!directory.exists()) {
        logger.error("Error: directory ${directory} does not exist (did you run 'npm install')?")
    } else {
        def templateFile = new File("${project.rootDir}/src/main/resources/templates/Languages.template")
        def templateEngine = new GStringTemplateEngine();
        def template = templateEngine.createTemplate(templateFile.text)
        def names = []
        def enumNames = []
        directory.eachFile { file ->
            if (file.name.endsWith("min.js")) {
                names.push(file.name)
                def segs = file.name.split("-")
                def n = "${segs[0].toUpperCase()}_${segs[1].toUpperCase()}"
                def idx = n.indexOf('.')
                if(idx != -1) {
                    def name = n.substring(0, idx).substring("PRISM_".length())
                    enumNames.push(name)
                }
            }
        }


        def model = [
            fileNames: names,
            enumNames: enumNames
        ]

        def result = template.make(model).toString()
        def out = new File("${project.buildDir}/generated/sources/main/java/io/sunshower/aire/ux/components/Language.java")
        if(!out.exists()) {
            out.parentFile.mkdirs()
            out.createNewFile()
        }
        out.text = result

    }


}


compileJava.dependsOn populate
compileJava.mustRunAfter populate

compileJava.dependsOn generateLanguagesEnumeration
compileJava.mustRunAfter generateLanguagesEnumeration


task linkSelf(type: NpmTask) {
    group = 'development'
    args = ['run', 'link']
}

task watch(type: NpmTask, dependsOn: 'linkSelf') {
    group = 'development'
    args = ['run', 'develop']
}

task buildResources(type: NpmTask) {
    group = 'development'
    args = ['run', 'build']
}

task develop() {
    group = 'development'
    dependsOn('nodeSetup',
            'buildResources',
            'build',
            'runDevelopment')
}